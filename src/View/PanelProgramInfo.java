/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import MOdel.Servants;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author Administrator
 */
public class PanelProgramInfo extends javax.swing.JPanel {

    private final boolean isInput;
    private final List<JFormattedTextField> versionCompoment;
    private final List<String> versionElements;

    /**
     * Creates new form PanelProgramInfo
     *
     * @param isInput
     */
    public PanelProgramInfo(boolean isInput) {
        this.isInput = isInput;
        initComponents();
        this.versionCompoment = new ArrayList<>();
        this.versionElements = new ArrayList<>();
        this.versionCompoment.add(txtF_major);
        this.versionCompoment.add(txtF_minor);
        this.versionCompoment.add(txtF_patcher);
        this.versionCompoment.add(txtF_revision);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtIconPath = new javax.swing.JTextField();
        lbIcon = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDetail = new javax.swing.JTextArea();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFilePath = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtF_minor = new javax.swing.JFormattedTextField();
        txtF_major = new javax.swing.JFormattedTextField();
        txtF_patcher = new javax.swing.JFormattedTextField();
        txtF_revision = new javax.swing.JFormattedTextField();

        setBackground(new java.awt.Color(204, 204, 255));

        txtIconPath.setEditable(false);
        txtIconPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtIconPathMouseClicked(evt);
            }
        });

        lbIcon.setBackground(new java.awt.Color(255, 255, 255));
        lbIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIcon.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Icon");

        txtDetail.setColumns(10);
        txtDetail.setLineWrap(true);
        txtDetail.setRows(3);
        txtDetail.setTabSize(5);
        txtDetail.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtDetail);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Detail");

        txtFilePath.setEditable(false);
        txtFilePath.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFilePath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFilePathMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Version");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(".");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText(".");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText(".");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Path");

        txtF_minor.setEditable(false);
        txtF_minor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtF_minor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtF_minor.setMinimumSize(new java.awt.Dimension(40, 22));
        txtF_minor.setPreferredSize(new java.awt.Dimension(40, 22));
        txtF_minor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtF_majorMouseClicked(evt);
            }
        });

        txtF_major.setEditable(false);
        txtF_major.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtF_major.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtF_major.setMinimumSize(new java.awt.Dimension(40, 22));
        txtF_major.setPreferredSize(new java.awt.Dimension(40, 22));
        txtF_major.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtF_majorMouseClicked(evt);
            }
        });

        txtF_patcher.setEditable(false);
        txtF_patcher.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtF_patcher.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtF_patcher.setMinimumSize(new java.awt.Dimension(40, 22));
        txtF_patcher.setPreferredSize(new java.awt.Dimension(40, 22));
        txtF_patcher.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtF_majorMouseClicked(evt);
            }
        });

        txtF_revision.setEditable(false);
        txtF_revision.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtF_revision.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtF_revision.setMinimumSize(new java.awt.Dimension(40, 22));
        txtF_revision.setPreferredSize(new java.awt.Dimension(40, 22));
        txtF_revision.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtF_majorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFilePath)
                    .addComponent(txtIconPath)
                    .addComponent(txtName)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtF_major, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtF_minor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtF_patcher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtF_revision, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIconPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3))
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7)
                        .addComponent(txtF_minor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtF_patcher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtF_revision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtF_major, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel8))
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        txtName.setEditable(isInput);
        if(isInput){
            txtF_minor.setText("0");
        }
        if(isInput){
            txtF_major.setText("0");
        }
        if(isInput){
            txtF_patcher.setText("0");
        }
        if(isInput){
            txtF_revision.setText("0");
        }
    }// </editor-fold>//GEN-END:initComponents

    private void txtIconPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIconPathMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() < 2 || !isInput) {
            return;
        }
        chosseIcon();
    }//GEN-LAST:event_txtIconPathMouseClicked

    private void chosseIcon() throws HeadlessException {
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(FileSystemView.getFileSystemView().getHomeDirectory());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION && showImage(fc.getSelectedFile())) {
            this.txtIconPath.setText(fc.getSelectedFile().getPath());
        }
    }

    private void txtFilePathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFilePathMouseClicked
        if (evt.getClickCount() < 2 || !isInput) {
            return;
        }
        chosseFilePath();
    }//GEN-LAST:event_txtFilePathMouseClicked

    private void txtF_majorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtF_majorMouseClicked
        // TODO add your handling code here:
        if (isInput) {
            return;
        }
        if (evt.getSource() instanceof JFormattedTextField jText && this.versionCompoment.contains(jText)) {
            eventTxtFormatClick(jText);
        }
    }//GEN-LAST:event_txtF_majorMouseClicked

    private void chosseFilePath() throws HeadlessException {
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(FileSystemView.getFileSystemView().getHomeDirectory());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.txtFilePath.setText(fc.getSelectedFile().getPath());
        }
    }

    private boolean showImage(File selectedFile) {
        try {
            BufferedImage icon = ImageIO.read(selectedFile);
            this.lbIcon.setIcon(new ImageIcon(resizeIcon(icon)));
            return true;
        } catch (IOException ex) {
            return false;
        }
    }

    private Image resizeIcon(BufferedImage bufferedImage) {
        return bufferedImage.getScaledInstance(
                (int) (this.lbIcon.getWidth()),
                (int) (this.lbIcon.getHeight()),
                Image.SCALE_AREA_AVERAGING);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JTextArea txtDetail;
    private javax.swing.JFormattedTextField txtF_major;
    private javax.swing.JFormattedTextField txtF_minor;
    private javax.swing.JFormattedTextField txtF_patcher;
    private javax.swing.JFormattedTextField txtF_revision;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextField txtIconPath;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void setDefaultValue(JFormattedTextField eventformatTxt) {
        eventformatTxt.setValue(0);
    }

    private Integer getValueFormat(JFormattedTextField eventformatTxt) {
        String value = eventformatTxt.getText();
        if (value == null || !value.matches("[0-9]+")) {
            return null;
        } else {
            return Integer.valueOf(value);
        }
    }

    private void eventTxtFormatClick(JFormattedTextField eventformatTxt) {
        if (this.versionElements.isEmpty()) {
            return;
        }
        if (getValueFormat(eventformatTxt) == null) {
            setDefaultValue(eventformatTxt);
        } else if (hasAdd()) {
            resetVersion();
        } else {
            upVersion(eventformatTxt);
        }
    }

    private void upVersion(JFormattedTextField eventformatTxt) {
        eventformatTxt.setValue(getValueFormat(eventformatTxt) + 1);
        for (int i = this.versionCompoment.indexOf(eventformatTxt) + 1; i < this.versionCompoment.size();) {
            setDefaultValue(this.versionCompoment.get(i++));
        }
    }

    private boolean hasAdd() {
        for (JFormattedTextField textField : versionCompoment) {
            String oldValue = this.versionElements.get(this.versionCompoment.indexOf(textField));
            String newValue = textField.getText();
            if (!oldValue.equalsIgnoreCase(newValue)) {
                return true;
            }
        }
        return false;
    }

    private void resetVersion() {
        int index = 0;
        for (JFormattedTextField textField : versionCompoment) {
            textField.setText(this.versionElements.get(index++));
        }
    }

    public void setVersion(String version) throws Exception {
        if (isInput) {
            return;
        }
        if (version == null || !version.matches("^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]$")) {
            throw new Exception(String.format("Version format illegal: %s (%%d.%%d.%%d.%%d)", version));
        } else {
            this.versionElements.addAll(Arrays.asList(version.split("\\.")));
            resetVersion();
        }
    }

}
